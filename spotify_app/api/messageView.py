from django.contrib.auth import get_user_model
from rest_framework import viewsets
from rest_framework.response import Response
from rest_framework import status
from rest_framework.decorators import api_view
from ..models.message import Message
from ..serializers.messageserializers import messageSerializer
from ..serializers.userserializers import userSerializer

# L·∫•y model User t·ª´ settings.AUTH_USER_MODEL
User = get_user_model()

@api_view(['GET'])
def get_messages_by_clerk_id(request, clerk_id):
    print("üîç Nh·∫≠n y√™u c·∫ßu l·∫•y tin nh·∫Øn v·ªõi clerk_id:", clerk_id)

    # Ki·ªÉm tra clerk_id kh√¥ng h·ª£p l·ªá
    if not clerk_id or clerk_id == "undefined":
        print("‚ùå clerk_id kh√¥ng h·ª£p l·ªá:", clerk_id)
        return Response({"detail": "Invalid clerk_id"}, status=400)

    # L·∫•y clerk_id c·ªßa ng∆∞·ªùi g·ª≠i t·ª´ request.user
    sender_clerk_id = getattr(request.user, "clerk_id", None)
    if not sender_clerk_id:
        print("‚ùå Kh√¥ng t√¨m th·∫•y clerk_id c·ªßa ng∆∞·ªùi g·ª≠i trong request.user")
        return Response({"detail": "Unauthorized"}, status=401)

    try:
        # Ki·ªÉm tra ng∆∞·ªùi g·ª≠i
        sender = User.objects.get(clerk_id=sender_clerk_id)
        print("‚úÖ Ng∆∞·ªùi g·ª≠i:", sender)
    except User.DoesNotExist:
        print(f"‚ùå Ng∆∞·ªùi g·ª≠i v·ªõi clerk_id {sender_clerk_id} kh√¥ng t·ªìn t·∫°i trong database")
        return Response({"detail": "Sender not found"}, status=404)
    except Exception as e:
        print(f"‚ùå L·ªói khi t√¨m ng∆∞·ªùi g·ª≠i: {str(e)}")
        return Response({"detail": "Error fetching sender"}, status=500)

    try:
        # Ki·ªÉm tra ng∆∞·ªùi nh·∫≠n
        receiver = User.objects.get(clerk_id=clerk_id)
        print("‚úÖ Ng∆∞·ªùi nh·∫≠n:", receiver)
    except User.DoesNotExist:
        print(f"‚ùå Ng∆∞·ªùi nh·∫≠n v·ªõi clerk_id {clerk_id} kh√¥ng t·ªìn t·∫°i trong database")
        return Response({"detail": "Receiver not found"}, status=404)
    except Exception as e:
        print(f"‚ùå L·ªói khi t√¨m ng∆∞·ªùi nh·∫≠n: {str(e)}")
        return Response({"detail": "Error fetching receiver"}, status=500)

    try:
        # T√¨m tin nh·∫Øn gi·ªØa sender v√† receiver
        messages = Message.objects.filter(
            sender=sender, receiver=receiver
        ) | Message.objects.filter(
            sender=receiver, receiver=sender
        )
        messages = messages.order_by("created_at")

        print(f"‚úÖ T√¨m th·∫•y {messages.count()} tin nh·∫Øn gi·ªØa {sender_clerk_id} v√† {clerk_id}")

        serializer = messageSerializer(messages, many=True)
        return Response(serializer.data, status=200)

    except Exception as e:
        print("‚ùå L·ªói khi l·∫•y tin nh·∫Øn:", str(e))
        return Response({"detail": f"Error fetching messages: {str(e)}"}, status=500)